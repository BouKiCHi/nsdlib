MEMORY {

    #// standard 2k SRAM (-zeropage and stack)

	#// Zeropages
	#// $0000-$00FF
    ZP:   start = $0002, size = $0060, type = rw, define = yes;

	#// $0100-$01FF 1 page for Stack
	STACK:start = $0100, size = $0100, type = rw, define = yes;

	#// S-RAM
    #// $0100-$01FF cpu stack
	#// $02FF-$07FF ram
    #// - data (run)
    #// - bss
    #// - heap
    SRAM: start = $0200, size = $0600, define = yes;

    #// additional 8K SRAM Bank
    RAM: start = $6000, size = $2000, define = yes;

    #// INES Cartridge Header
    HEADER: start = $0, size = $10, file = %O ,fill = yes;

	#// 16k ROM Banks
	#// - Music data
    ROM0: start = $8000, size = $4000, file = %O ,fill = yes, define = yes;

	#//  8k ROM Banks
	#// - DPCM data
	ROMD: start = $C000, size = $2000, file = %O ,fill = yes, define = yes;

    #//  8K ROM Banks
    #// - startup
    #// - code
    #// - rodata
    #// - data (load)
	ROMP: start = $E000, size = $1ffa, file = %O ,fill = yes, define = yes;

    #// Hardware Vectors at End of 2nd 8K ROM
    ROMV: start = $fffa, size = $6, file = %O, fill = yes;

    #// 1 8k CHR Bank
    ROMC: start = $0000, size = $2000, file = %O, fill = yes;


}

SEGMENTS {
    HEADER:   load = HEADER,          type = ro;

    MUSDATA:  load = ROM0,            type = ro,  define = yes;
    PCMDATA:  load = ROMD,            type = ro,  define = yes;
    STARTUP:  load = ROMP,            type = ro,  define = yes;
    LOWCODE:  load = ROMP,            type = ro,                optional = yes;
    ONCE:     load = ROMP,            type = ro,  define = yes, optional = yes;
    CODE:     load = ROMP,            type = ro,  define = yes;
    RODATA:   load = ROMP,            type = ro,  define = yes;
    DATA:     load = ROMP, run = RAM, type = rw,  define = yes;

    VECTORS:  load = ROMV,            type = rw;
    CHARS:    load = ROMC,            type = rw;
    BSS:      load = SRAM,            type = bss, define = yes;
    HEAP:     load = SRAM,            type = bss, optional = yes;
    ZEROPAGE: load = ZP,              type = zp;
}
